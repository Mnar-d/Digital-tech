#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
var app = require('../app');
var debug = require('debug')('code-along:server');
var http = require('http');
var users = [];
var rooms = [];
const socketIo = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const mongoose = require("mongoose");

mongoose.connect(
  process.env.MongoDB,
  { useNewUrlParser: true, useUnifiedTopology: true  },
  () => {
    console.log("mongoDb is connect");
  }
);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// const io = socketIo(server);






/*
Handle socket IO
*/

// io.on('connection', socket => {


//   socket.on("messageToUser", (message,userId) => {

//     const targtedUser=this.users.filter((user) => user.userId === userId);
//     io.to(targtedUser.id).emit("message",message);
    
  
//   });


//   socket.on("messageToGroup", (message,groupId) => {

//     socket.join(groupId)
//     io.in(groupId).emit("teamMessage",message);
    
  
//   });

//   socket.on("leaveThegroup", (groupId) => {

//     socket.leave(groupId)
    
    
  
//   });


  
//   socket.on("setuser", (userId) => {
//     users.push({socketId:socket.id,userId:userId})
//   });

//   socket.on("disconnect", () => {
//     console.log("Client disconnected");

//     this.users = this.users.filter((user) => user.socketId !== socket.id);
  
//   });


// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
